openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
servers:
- url: http://localhost:8000/
paths:
  /api/auth/login/:
    post:
      operationId: login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "Satan"
                password:
                  type: string
                  example: "Lucifer666"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b"
        '400':
          description: Bad request
        '401':
          description: Invalid username or password
  /api/auth/logout/:
    post:
      operationId: Logout
      description: Invalidate the provided token.
      tags:
        - auth
      security:
        - tokenAuth: []
      responses:
        '204':
          description: Logout successful.
        '401':
          description: Invalid or no token provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/registration/:
    post:
      operationId: Register User
      tags:
        - auth
      description: This will register a new user and return an authentication token
      requestBody:
        description: A JSON object containing user registration information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: A user was successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b"
        '400':
          description: A user with this username already exists
        '500':
          description: Registration failed. Username might already be taken.
  /api/tasks/:
    get:
      operationId: tasks_list
      tags:
      - tasks
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskList'
          description: ''
    post:
      operationId: tasks_create
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskDetail'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
  /api/tasks/{id}/:
    get:
      operationId: tasks_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
    put:
      operationId: tasks_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskDetail'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
    patch:
      operationId: tasks_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskDetail'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
    delete:
      operationId: tasks_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/adverts/:
    get:
      operationId: advert_list
      tags:
        - adverts
      security:
        - tokenAuth: []
      responses:
        '200':
          description: "List of adverts"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advert'
  /api/adverts/{advert_pk}/:
    get:
      operationId: advert_detail
      tags:
        - adverts
      parameters:
        - name: advert_pk
          in: path
          required: true
          description: "ID of the advert to retrieve"
          schema:
            type: integer
      security:
        - tokenAuth: []
      responses:
        '200':
          description: "Detail of a single advert"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advert'
        '404':
          description: "Advert not found"
components:
  schemas:
    Advert:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the advert
        title:
          type: string
          description: The title of the advert
        description:
          type: string
          description: A detailed description of the advert
        created:
          type: string
          format: date-time
          description: The creation date of the advert
        city:
          type: string
          description: The city where the advert is located
        category:
          type: string
          description: The category of the advert
        views:
          type: integer
          description: The number of views of the advert
    PatchedTaskDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
    TaskDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - description
      - id
      - title
      - updated
    TaskList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
      required:
      - id
      - title
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - password
      - username
    Error:
      type: object
      properties:
        detail:
          type: string
          description: Error message.
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
